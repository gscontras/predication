var subset = function(df, key, value){
  return filter(function(d){
    return (d[key]==value)
  },df)
}
var displayERP = function(erp){
  return _.object(map(function(x){return [x, Math.exp(erp.score([],x))]}, 
                      erp.support()
                     )
                 )
}

// discretized range between 0 - 1
var stateBins = [0.01,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1]
var thresholdBins = [0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9]
var s1optimality = 5


var world = [
  {name: "fepKind",
   kind: "fep", 
   wings: [0.5],
   legs: [0.01],
   claws: [0.01], 
   tall: [0.3, 0.4, 0.2, 0.8, 0.5, 0.3, 0.4, 0.5, 0.3, 0.4]},

  {name: "wugKind",
   kind: "wug", 
   wings: [0.5],
   legs: [1],
   claws: [0.4], 
   tall: [0.2,0.1,0.2,0.1,0.2,0.3,0.2,0.3,0.2,0.1]},

  {name: "lorchKind",
   kind: "lorch", 
   wings: [0.5],
   legs: [1],
   claws: [0.2], 
   tall: [0.6, 0.7]}
  //    height: [1]}
]

var allKinds = _.uniq(_.pluck(world, "kind"))
// var allProperties = ["wings","legs","claws","height"]
var allProperties = ["height"]

// var hasF = function(thing, property){
//   return thing[property]
// }

var prevalence = function(kind, property){
  //   var members = subset(world, "kind", kind)
  //   var v = filter(function(x){return hasF(x, property)}, members)
  return uniformDraw(subset(world, "kind", kind)[0][property])
}

// init for reduce is 0.001 so that each state has > 0 prob
var prevalencePrior = function(property){
  var p =  map(function(k){return prevalence(k, property)}, allKinds)
  return map(function(s){
    return reduce(function(x, i){
      var k = x==s ? 1 : 0
      return i + k
    }, 0.001, p)
  }, stateBins)
}


var statePrior = function(probs){
  return stateBins[discrete(probs)]
}

var thresholdPrior = function() {
  var threshold = uniformDraw(thresholdBins)
  return threshold
}

var utterancePrior = function() {
  var utterances = ["generic", "null"]  
  //    var utterances = ["generic",
  //                 "generic is false"]  
  return flip(0.5) ? utterances[0] : utterances[1]
}

// var utterancePrior = function(predicate) {
//   var utterances = predicate == "height" ? 
//       ["tall","null"] :
//   ["generic", "null"]  
//   //    var utterances = ["generic is true",
//   //                 "generic is false"]  
//   return flip(0.5) ? utterances[0] : utterances[1]
// }


var meaning = function(utt,state, threshold) {
  return _.isNumber(utt) ? state == utt :
  utt=="generic"? state>threshold :
  utt=="generic is false"? state<=threshold :
  utt=='null'? true:
  utt=='some'? state>0:
  utt=='most'? state>= 0.5:
  utt=='all'? state >= 0.99:
  true
}

var listener0 = cache(function(utterance, threshold, prior) {
  Enumerate(function(){
    var state = statePrior(prior)
    var m = meaning(utterance, state, threshold)
    condition(m)
    return state
  })
})

// listener0("generic", 0.9, prevalencePrior("wings"))

var speaker1 = cache(function(state, threshold, prior) {
  Enumerate(function(){
    var utterance = utterancePrior()
    var L0 = listener0(utterance, threshold, prior)
    factor(L0.score([],state))
    return utterance
  })
})

// speaker1(0.99, 0.9, prevalencePrior("wings"))

var listener1 = function(utterance, prior) {
  Enumerate(function(){
    var state = statePrior(prior)
    var threshold = thresholdPrior()
    var S1 = speaker1(state, threshold, prior)
    factor(s1optimality*S1.score([],utterance))
    return state
  })
}

// listener1("generic", prevalencePrior("wings"))

var speaker2 = function(k, f){
  Enumerate(function(){
    var utterance = utterancePrior()
    var property = f.split(' ')[1]
    var prev = prevalence(k, property)
    var prior = prevalencePrior(property)
    var wL1 = listener1(utterance, prior)
    factor(wL1.score([], prev))
    var generic  = k + "s " + f

    return utterance=="generic" ?
      generic :
    "I don't think " + generic
  })
}


print(speaker2("lorch", "are tall"))
print(speaker2("fep", "are tall"))
print(speaker2("wug", "are tall"))
