// time webppl generics-extensional.wppl --require genericsUtils

var subset = function(df, key, value){
    return filter(function(d){
        return (d[key]==value)
    },df)
}


// discretized range between 0 - 1
var stateBins = [0.01,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1]
var thresholdBins = [0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9]
var s1optimality = 5


var world = [
  {name: "fep0", kind: "fep", wings: true, legs: false, claws: false, height: 0.3},
  {name: "fep1", kind: "fep", wings: true, legs: false, claws: false, height: 0.4},
  {name: "fep2", kind: "fep", wings: true, legs: false, claws: false, height: 0.2},
  {name: "fep3", kind: "fep", wings: true, legs: false, claws: false, height: 0.8},
  {name: "fep4", kind: "fep", wings: true, legs: false, claws: false, height: 0.5},
  {name: "fep5", kind: "fep", wings: false, legs: false, claws: false, height: 0.3},
  {name: "fep6", kind: "fep", wings: false, legs: false, claws: false, height: 0.4},
  {name: "fep7", kind: "fep", wings: false, legs: false, claws: false, height: 0.5},
  {name: "fep8", kind: "fep", wings: false, legs: false, claws: false, height: 0.3},
  {name: "fep9", kind: "fep", wings: false, legs: false, claws: false, height: 0.4},

  {name: "wug0", kind: "wug", wings: true, legs: true, claws: true, height: 0.2},
  {name: "wug1", kind: "wug", wings: true, legs: true, claws: true, height: 0.1},
  {name: "wug2", kind: "wug", wings: true, legs: true, claws: true, height: 0.2},
  {name: "wug3", kind: "wug", wings: true, legs: true, claws: true, height: 0.1},
  {name: "wug4", kind: "wug", wings: true, legs: true, claws: false, height: 0.2},
  {name: "wug5", kind: "wug", wings: false, legs: true, claws: false, height: 0.3},
  {name: "wug6", kind: "wug", wings: false, legs: true, claws: false, height: 0.2},
  {name: "wug7", kind: "wug", wings: false, legs: true, claws: false, height: 0.3},
  {name: "wug8", kind: "wug", wings: false, legs: true, claws: false, height: 0.2},
  {name: "wug9", kind: "wug", wings: false, legs: true, claws: false, height: 0.1},

  {name: "lorch0", kind: "lorch", wings: true, legs: true, claws: true, height: 0.7},
  {name: "lorch1", kind: "lorch", wings: true, legs: true, claws: true, height: 0.6},
  {name: "lorch2", kind: "lorch", wings: true, legs: true, claws: false, height: 0.7},
  {name: "lorch3", kind: "lorch", wings: true, legs: true, claws: false, height: 0.6},
  {name: "lorch4", kind: "lorch", wings: true, legs: true, claws: false, height: 0.7},
  {name: "lorch5", kind: "lorch", wings: false, legs: true, claws: false, height: 0.6},
  {name: "lorch6", kind: "lorch", wings: false, legs: true, claws: false, height: 0.7},
  {name: "lorch7", kind: "lorch", wings: false, legs: true, claws: false, height: 0.6},
  {name: "lorch8", kind: "lorch", wings: false, legs: true, claws: false, height: 0.7},
  {name: "lorch9", kind: "lorch", wings: false, legs: true, claws: false, height: 0.6}
]




var allKinds = _.uniq(_.pluck(world, "kind"))
var propertyDegrees = {"wings":"wings",
                        "legs":"legs",
                        "claws":"claws",
                        "tall":"height"}

var hasF = function(thing, property){
  return thing[property]
}

var prevalence = function(wrld, kind, property){
    var members = subset(wrld, "kind", kind)
    var v = filter(function(x){return hasF(x, property)}, members)
    var mean =  v.length==0 ? 0.01 : sum(_.pluck(v, property)) / members.length
    // round to nearest bin
    return mean == 0.01 ? 0.01 : Math.floor(10*mean)/10
}

// init for reduce is 0.001 so that each state has > 0 prob
var prevalencePrior = function(property, wrld){
  var p =  map(function(k){return prevalence(wrld, k, property)}, allKinds)
  return map(function(s){
    return reduce(function(x, i){
      var k = x==s ? 1 : 0
      return i + k
    }, 0.001, p)
  }, stateBins)
}

var scalePrior = function(property){
  var p = _.pluck(world, property)
  return map(function(s){
    return reduce(function(x, i){
      var k = x==s ? 1 : 0
      return i + k
    }, 0.001, p)
  }, stateBins)
}


var statePrior = function(probs){
  return stateBins[discrete(probs)]
}

var thresholdPrior = function() {
  var threshold = uniformDraw(thresholdBins)
  return threshold
}

var utterancePrior = function(predicate) {
  var utterances = predicate == "height" ? 
                      ["tall","null"] :
                      ["generic", "null"]  
  //    var utterances = ["generic is true",
  //                 "generic is false"]  
  return flip(0.5) ? utterances[0] : utterances[1]
}

var meaning = function(utt,state, threshold) {
  return _.isNumber(utt) ? state == utt :
  utt=="generic"? state>threshold :
  utt=="tall"? state>threshold :
  utt=="generic is false"? state<=threshold :
  utt=='null'? true:
  utt=='some'? state>0:
  utt=='most'? state>= 0.5:
  utt=='all'? state >= 0.99:
  true
}

var listener0 = cache(function(utterance, threshold, prior) {
  Enumerate(function(){
    var state = statePrior(prior)
    var m = meaning(utterance, state, threshold)
    condition(m)
    return state
  })
})

// listener0("tall", 0.9, scalePrior("height"))

var speaker1 = cache(function(state, threshold, prior, predicate) {
  Enumerate(function(){
    var utterance = utterancePrior(predicate)
    var L0 = listener0(utterance, threshold, prior)
    factor(L0.score([],state))
    return utterance
  })
})

var listener1 = cache(function(utterance, predicate, wrld) {
  Enumerate(function(){
    var prior = predicate == "height" ? scalePrior(predicate) : prevalencePrior(predicate, wrld)
    var state = statePrior(prior)
    var threshold = thresholdPrior()
    var S1 = speaker1(state, threshold, prior, predicate)
    factor(s1optimality*S1.score([],utterance))
    return state
  })
})

// speaker1(1, 0.9, scalePrior("height"), "height")


// listener1("tall", "height")

var worldWithTallness = map(function(thing){

      var tallERP = Enumerate(function(){

        var utterance = utterancePrior("height")
        var tallnessPosterior = listener1(utterance, "height")
      
        factor(tallnessPosterior.score([], thing["height"]))
      
        return utterance
      })

      return _.extend(thing, {tall: Math.exp(tallERP.score([], "tall"))})
    }, world)

var speaker2 = function(k, f){
  Enumerate(function(){

    var property = f.split(' ')[1]
    var degree = propertyDegrees[property]

    var wrld = _.isNumber(world[0][f]) ? world : worldWithTallness

    var prev = prevalence(wrld, k, property)

    var utterance = utterancePrior(property)

    var wL1 = listener1(utterance, property, wrld)

    factor(wL1.score([], prev))
    var generic  = k + "s " + f

    return utterance=="generic" ?
              generic :
              "I don't think " + generic

  })
}


speaker2("lorch", "are tall")